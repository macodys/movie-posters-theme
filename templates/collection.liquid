<div class="collection-page">
  <div class="collection-header">
    <div class="collection-title">
      <h1>{{ collection.title }}</h1>
      <nav class="breadcrumb">
        <a href="/">Home</a>
        <span class="separator">></span>
        <span>{{ collection.title }}</span>
      </nav>
    </div>
    
    <div class="collection-filters">
      <div class="filter-buttons">
        {% if collection.handle == 'tv-movies' %}
          <button class="filter-btn active" data-category="all">All</button>
          <button class="filter-btn" data-category="movies">Movies</button>
          <button class="filter-btn" data-category="tv-shows">TV Shows</button>
          <button class="filter-btn" data-category="anime">Anime</button>
          
          <!-- Subcategories for TV & Movies -->
          <div class="subcategory-section">
            <h3 class="subcategory-title">Popular Franchises</h3>
            <div class="subcategory-buttons">
              <button class="subcategory-btn" data-subcategory="marvel">Marvel</button>
              <button class="subcategory-btn" data-subcategory="dc">DC</button>
              <button class="subcategory-btn" data-subcategory="star-wars">Star Wars</button>
              <button class="subcategory-btn" data-subcategory="anime">Anime</button>
            </div>
          </div>
        {% else %}
          <button class="filter-btn active" data-category="all">All</button>
          <button class="filter-btn" data-category="tv-movies">TV & Movies</button>
          <button class="filter-btn" data-category="games">Games</button>
          <button class="filter-btn" data-category="music">Music</button>
          <button class="filter-btn" data-category="sports">Sports</button>
        {% endif %}
      </div>
      
      <div class="collection-actions">
        <div class="sort-dropdown">
          <select class="sort-select">
            <option value="manual">Featured</option>
            <option value="best-selling">Best Selling</option>
            <option value="title-ascending">A-Z</option>
            <option value="title-descending">Z-A</option>
            <option value="price-ascending">Price: Low to High</option>
            <option value="price-descending">Price: High to Low</option>
            <option value="created-ascending">Oldest to Newest</option>
            <option value="created-descending">Newest to Oldest</option>
          </select>
        </div>
        
        <div class="view-options">
          <button class="view-btn active" data-view="grid">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="7" height="7"></rect>
              <rect x="14" y="3" width="7" height="7"></rect>
              <rect x="14" y="14" width="7" height="7"></rect>
              <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
          </button>
          <button class="view-btn" data-view="list">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="8" y1="6" x2="21" y2="6"></line>
              <line x1="8" y1="12" x2="21" y2="12"></line>
              <line x1="8" y1="18" x2="21" y2="18"></line>
              <line x1="3" y1="6" x2="3.01" y2="6"></line>
              <line x1="3" y1="12" x2="3.01" y2="12"></line>
              <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="products-grid" id="products-grid">
    {% comment %} Debug: Collection info {% endcomment %}
    <div style="background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; font-family: monospace; font-size: 12px;">
      <strong>Collection Debug Info:</strong><br>
      Collection Handle: {{ collection.handle }}<br>
      Collection Title: {{ collection.title }}<br>
      Products Count: {{ collection.products.size }}<br>
      Collection ID: {{ collection.id }}<br>
      {% if collection.products.size == 0 %}
        <span style="color: red;">‚ö†Ô∏è No products found in this collection!</span><br>
        <span style="color: blue;">üí° Make sure products are assigned to the "{{ collection.handle }}" collection in Shopify admin.</span>
      {% endif %}
    </div>
    
    {% comment %} Use collection products, or fallback to all products if collection is empty {% endcomment %}
    {% assign products_to_show = collection.products %}
    {% if collection.products.size == 0 %}
      {% assign products_to_show = collections.all.products %}
      <div style="background: #fff3cd; padding: 10px; margin: 10px 0; border-radius: 5px; border: 1px solid #ffeaa7;">
        <strong>üìã Fallback Mode:</strong> Showing products from "All" collection since "{{ collection.title }}" is empty.
      </div>
    {% endif %}
    
    {% for product in products_to_show %}
      {% comment %} Debug: Product info {% endcomment %}
      <div style="background: #e8f4fd; padding: 5px; margin: 5px 0; border-radius: 3px; font-family: monospace; font-size: 11px;">
        Product: {{ product.title }} | Variants: {{ product.variants.size }} | Handle: {{ product.handle }}<br>
        Images: {{ product.images.size }} | Featured: {% if product.featured_image %}Yes{% else %}No{% endif %}<br>
        {% if product.variants.size > 0 %}
          First variant: {{ product.variants.first.option1 | default: 'No option1' }} | Image ID: {{ product.variants.first.image_id | default: 'None' }}
        {% endif %}
      </div>
      
      {% comment %} Show each variant as a separate product card (like search results) {% endcomment %}
      {% assign has_variants = false %}
      
      {% for variant in product.variants %}
        {% assign color = variant.option1 | default: 'Default' %}
        
        {% comment %} Filter out invalid color names - accept real colors and common variant patterns {% endcomment %}
        {% assign is_valid_color = false %}
        {% assign valid_colors = 'Red,Blue,Green,Yellow,Orange,Purple,Pink,Black,White,Gray,Grey,Brown,Silver,Gold,Maroon,Navy,Teal,Turquoise,Cyan,Magenta,Lime,Olive,Indigo,Violet,Crimson,Default' %}
        {% assign invalid_colors = 'Default Title,Title,Size,Small,Medium,Large,XL,XXL,One Size' %}
        
        {% comment %} Check if it's a valid color name {% endcomment %}
        {% if valid_colors contains color %}
          {% assign is_valid_color = true %}
        {% endif %}
        
        {% comment %} Check if it's a common variant pattern (z1, z2, etc.) and not an invalid name {% endcomment %}
        {% unless invalid_colors contains color %}
          {% if color contains 'z' and color.size <= 3 %}
            {% assign is_valid_color = true %}
          {% endif %}
        {% endunless %}
        
        {% comment %} Show each valid variant as a separate product {% endcomment %}
        {% if is_valid_color %}
          {% assign has_variants = true %}
          
          {% comment %} Get variant-specific image for this color {% endcomment %}
          {% assign variant_image = null %}
          {% if variant.featured_image %}
            {% assign variant_image = variant.featured_image %}
          {% elsif variant.image_id %}
            {% for image in product.images %}
              {% if image.id == variant.image_id %}
                {% assign variant_image = image %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endif %}
          
          {% comment %} Fallback to product featured image {% endcomment %}
          {% unless variant_image %}
            {% assign variant_image = product.featured_image %}
          {% endunless %}
          
          <div class="product-card" data-category="{{ product.metafields.custom.category | default: 'all' | downcase }}" data-color="{{ color | downcase }}">
            <div class="product-image">
              <a href="{{ product.url }}?variant={{ variant.id }}">
                {% if variant_image %}
                  <img src="{{ variant_image | image_url: width: 400 }}" 
                       alt="{{ variant_image.alt | default: product.title | escape }}"
                       loading="lazy">
                {% else %}
                  <div class="placeholder-image">
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                      <circle cx="8.5" cy="8.5" r="1.5"></circle>
                      <polyline points="21,15 16,10 5,21"></polyline>
                    </svg>
                  </div>
                {% endif %}
                <div class="color-badge">{{ color }}</div>
              </a>
              <div class="product-price-overlay">
                <span class="price">{{ variant.price | money }}</span>
                {% if variant.compare_at_price > variant.price %}
                  <span class="price-compare">{{ variant.compare_at_price | money }}</span>
                {% endif %}
              </div>
              <div class="product-title-overlay">
                <h3 class="product-title">
                  <a href="{{ product.url }}?variant={{ variant.id }}">
                    {% if color != 'Default' %}{{ product.title }} - {{ color }}{% else %}{{ product.title }}{% endif %}
                  </a>
                </h3>
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
      
      {% comment %} If no variants were processed, show a fallback product card {% endcomment %}
      {% unless has_variants %}
        <div class="product-card" data-category="{{ product.metafields.custom.category | default: 'all' | downcase }}">
          <div class="product-image">
            <a href="{{ product.url }}">
              {% if product.featured_image %}
                <img src="{{ product.featured_image | image_url: width: 400 }}" 
                     alt="{{ product.featured_image.alt | escape }}"
                     loading="lazy">
              {% else %}
                <div class="placeholder-image">
                  <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                    <polyline points="21,15 16,10 5,21"></polyline>
                  </svg>
                </div>
              {% endif %}
            </a>
            <div class="product-price-overlay">
              <span class="price">{{ product.price | money }}</span>
              {% if product.compare_at_price > product.price %}
                <span class="price-compare">{{ product.compare_at_price | money }}</span>
              {% endif %}
            </div>
            <div class="product-title-overlay">
              <h3 class="product-title">
                <a href="{{ product.url }}">{{ product.title }}</a>
              </h3>
            </div>
          </div>
        </div>
      {% endunless %}
      
    {% endfor %}
  </div>

  {% if products_to_show.size == 0 %}
    <div class="empty-collection">
      <h2>No products found</h2>
      <p>Try adjusting your filters or check back later for new products.</p>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.filter-btn');
  const productCards = document.querySelectorAll('.product-card');
  const sortSelect = document.querySelector('.sort-select');
  const viewButtons = document.querySelectorAll('.view-btn');
  const productsGrid = document.getElementById('products-grid');

  // Filter functionality
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const category = this.dataset.category;
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Filter products
      productCards.forEach(card => {
        const productCategory = card.dataset.category;
        let shouldShow = false;
        
        if (category === 'all') {
          shouldShow = true;
        } else if (category === 'movies' && (productCategory === 'movies' || productCategory === 'tv-movies')) {
          shouldShow = true;
        } else if (category === 'tv-shows' && (productCategory === 'tv-shows' || productCategory === 'tv-movies')) {
          shouldShow = true;
        } else if (category === 'anime' && (productCategory === 'anime' || productCategory === 'tv-movies')) {
          shouldShow = true;
        } else if (productCategory === category) {
          shouldShow = true;
        }
        
        if (shouldShow) {
          card.style.display = 'block';
          card.classList.add('fade-in');
        } else {
          card.style.display = 'none';
        }
      });
    });
  });

  // Sort functionality
  sortSelect.addEventListener('change', function() {
    const sortValue = this.value;
    const products = Array.from(productCards).filter(card => card.style.display !== 'none');
    
    products.sort((a, b) => {
      const titleA = a.querySelector('.product-title a').textContent.toLowerCase();
      const titleB = b.querySelector('.product-title a').textContent.toLowerCase();
      const priceA = parseFloat(a.querySelector('.price').textContent.replace(/[^0-9.]/g, ''));
      const priceB = parseFloat(b.querySelector('.price').textContent.replace(/[^0-9.]/g, ''));
      
      switch(sortValue) {
        case 'title-ascending':
          return titleA.localeCompare(titleB);
        case 'title-descending':
          return titleB.localeCompare(titleA);
        case 'price-ascending':
          return priceA - priceB;
        case 'price-descending':
          return priceB - priceA;
        default:
          return 0;
      }
    });
    
    // Reorder products in grid
    products.forEach(product => {
      productsGrid.appendChild(product);
    });
  });

  // View toggle functionality
  viewButtons.forEach(button => {
    button.addEventListener('click', function() {
      const view = this.dataset.view;
      
      viewButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      if (view === 'list') {
        productsGrid.classList.add('list-view');
      } else {
        productsGrid.classList.remove('list-view');
      }
    });
  });
});
</script>