<div class="collection-page">
  <div class="collection-header">
    <div class="collection-title">
      <h1>{{ collection.title }}</h1>
      <nav class="breadcrumb">
        <a href="/">Home</a>
        <span class="separator">></span>
        <span>{{ collection.title }}</span>
      </nav>
    </div>
    
    <div class="collection-filters">
      <div class="filter-buttons">
        <button class="filter-btn active" data-category="all">All</button>
        <button class="filter-btn" data-category="tv-movies">TV & Movies</button>
        <button class="filter-btn" data-category="games">Games</button>
        <button class="filter-btn" data-category="music">Music</button>
        <button class="filter-btn" data-category="sports">Sports</button>
      </div>
      
      <div class="collection-actions">
        <div class="sort-dropdown">
          <select class="sort-select">
            <option value="manual">Featured</option>
            <option value="best-selling">Best Selling</option>
            <option value="title-ascending">A-Z</option>
            <option value="title-descending">Z-A</option>
            <option value="price-ascending">Price: Low to High</option>
            <option value="price-descending">Price: High to Low</option>
            <option value="created-ascending">Oldest to Newest</option>
            <option value="created-descending">Newest to Oldest</option>
          </select>
        </div>
        
        <div class="view-options">
          <button class="view-btn active" data-view="grid">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="7" height="7"></rect>
              <rect x="14" y="3" width="7" height="7"></rect>
              <rect x="14" y="14" width="7" height="7"></rect>
              <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
          </button>
          <button class="view-btn" data-view="list">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="8" y1="6" x2="21" y2="6"></line>
              <line x1="8" y1="12" x2="21" y2="12"></line>
              <line x1="8" y1="18" x2="21" y2="18"></line>
              <line x1="3" y1="6" x2="3.01" y2="6"></line>
              <line x1="3" y1="12" x2="3.01" y2="12"></line>
              <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="products-grid" id="products-grid">
    {% for product in collection.products %}
      <div class="product-card" data-category="{{ product.metafields.custom.category | default: 'all' | downcase }}">
        <div class="product-image">
          <a href="{{ product.url }}">
            {% if product.featured_image %}
              <img src="{{ product.featured_image | image_url: width: 400 }}" 
                   alt="{{ product.featured_image.alt | escape }}"
                   loading="lazy">
            {% else %}
              <div class="placeholder-image">
                <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21,15 16,10 5,21"></polyline>
                </svg>
              </div>
            {% endif %}
          </a>
        </div>
        <div class="product-info">
          <h3 class="product-title">
            <a href="{{ product.url }}">{{ product.title }}</a>
          </h3>
          <div class="product-price">
            <span class="price">{{ product.price | money }}</span>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>

  {% if collection.products.size == 0 %}
    <div class="empty-collection">
      <h2>No products found</h2>
      <p>Try adjusting your filters or check back later for new products.</p>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.filter-btn');
  const productCards = document.querySelectorAll('.product-card');
  const sortSelect = document.querySelector('.sort-select');
  const viewButtons = document.querySelectorAll('.view-btn');
  const productsGrid = document.getElementById('products-grid');

  // Filter functionality
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const category = this.dataset.category;
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Filter products
      productCards.forEach(card => {
        if (category === 'all' || card.dataset.category === category) {
          card.style.display = 'block';
          card.classList.add('fade-in');
        } else {
          card.style.display = 'none';
        }
      });
    });
  });

  // Sort functionality
  sortSelect.addEventListener('change', function() {
    const sortValue = this.value;
    const products = Array.from(productCards).filter(card => card.style.display !== 'none');
    
    products.sort((a, b) => {
      const titleA = a.querySelector('.product-title a').textContent.toLowerCase();
      const titleB = b.querySelector('.product-title a').textContent.toLowerCase();
      const priceA = parseFloat(a.querySelector('.price').textContent.replace(/[^0-9.]/g, ''));
      const priceB = parseFloat(b.querySelector('.price').textContent.replace(/[^0-9.]/g, ''));
      
      switch(sortValue) {
        case 'title-ascending':
          return titleA.localeCompare(titleB);
        case 'title-descending':
          return titleB.localeCompare(titleA);
        case 'price-ascending':
          return priceA - priceB;
        case 'price-descending':
          return priceB - priceA;
        default:
          return 0;
      }
    });
    
    // Reorder products in grid
    products.forEach(product => {
      productsGrid.appendChild(product);
    });
  });

  // View toggle functionality
  viewButtons.forEach(button => {
    button.addEventListener('click', function() {
      const view = this.dataset.view;
      
      viewButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      if (view === 'list') {
        productsGrid.classList.add('list-view');
      } else {
        productsGrid.classList.remove('list-view');
      }
    });
  });
});
</script>